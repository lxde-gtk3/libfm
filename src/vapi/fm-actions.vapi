/* fm-actions.vapi generated by valac 0.48.17, do not modify. */

namespace Fm {
	namespace FileActionParameters {
		[CCode (cheader_filename = "fm-actions.h")]
		public static string? expand (string? templ, GLib.List<Fm.FileInfo> files, bool for_display = false, Fm.FileInfo? first_file = null);
		[CCode (cheader_filename = "fm-actions.h")]
		public static bool is_plural (string? exec);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public class FileAction : Fm.FileActionObject {
		public GLib.List<Fm.FileActionProfile> profiles;
		public Fm.FileActionTarget target;
		public string? toolbar_label;
		public FileAction (string desktop_id);
		public FileAction.from_keyfile (GLib.KeyFile kf);
		public bool match (GLib.List<Fm.FileInfo> files, out unowned Fm.FileActionProfile matched_profile);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	[Compact]
	public class FileActionCondition {
		public string[]? base_names;
		public Fm.FileActionCapability capabilities;
		public string[]? folders;
		public bool match_case;
		public string[]? mime_types;
		public string[]? not_show_in;
		public string[]? only_show_in;
		public string[]? schemes;
		public int selection_count;
		public char selection_count_cmp;
		public string? show_if_registered;
		public string? show_if_running;
		public string? show_if_true;
		public string? try_exec;
		public FileActionCondition (GLib.KeyFile kf, string group);
		public bool match (GLib.List<Fm.FileInfo> files);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public class FileActionItem {
		public Fm.FileActionObject action;
		public GLib.List<Fm.FileActionItem>? children;
		public string? desc;
		public string? icon;
		public string? name;
		public weak Fm.FileActionProfile profile;
		public FileActionItem.from_action (Fm.FileAction action, Fm.FileActionProfile profile, GLib.List<Fm.FileInfo> files);
		public FileActionItem.from_menu (Fm.FileActionMenu menu, GLib.List<Fm.FileInfo> files);
		public unowned string? get_desc ();
		public unowned string? get_icon ();
		public unowned string get_id ();
		public unowned string? get_name ();
		public unowned GLib.List<Fm.FileActionItem>? get_sub_items ();
		public Fm.FileActionTarget get_target ();
		public bool is_action ();
		public bool is_menu ();
		public bool launch (GLib.AppLaunchContext ctx, GLib.List<Fm.FileInfo> files, out string? output);
		public static Fm.FileActionItem? new_for_action_object (Fm.FileActionObject action_obj, GLib.List<Fm.FileInfo> files);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public class FileActionMenu : Fm.FileActionObject {
		public GLib.List<Fm.FileActionObject> cached_children;
		public string[]? items_list;
		public FileActionMenu (string desktop_id);
		public void cache_children (GLib.List<Fm.FileInfo> files, string[] items_list);
		public FileActionMenu.from_keyfile (GLib.KeyFile kf);
		public bool match (GLib.List<Fm.FileInfo> files);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public class FileActionObject : GLib.Object {
		public Fm.FileActionCondition condition;
		public string? desc;
		public bool enabled;
		public bool has_parent;
		public bool hidden;
		public string? icon;
		public string id;
		public string? name;
		public string? suggested_shortcut;
		public string? tooltip;
		public Fm.FileActionType type;
		public FileActionObject ();
		public FileActionObject.from_key_file (GLib.KeyFile kf);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	[Compact]
	public class FileActionProfile {
		public Fm.FileActionCondition condition;
		public string exec;
		public string? exec_as;
		public Fm.FileActionExecMode exec_mode;
		public string id;
		public string? name;
		public string? path;
		public bool startup_notify;
		public string? startup_wm_class;
		public FileActionProfile (GLib.KeyFile kf, string profile_name);
		public bool launch (GLib.AppLaunchContext ctx, GLib.List<Fm.FileInfo> files, out string? output);
		public bool match (GLib.List<Fm.FileInfo> files);
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public enum FileActionCapability {
		OWNER,
		READABLE,
		WRITABLE,
		EXECUTABLE,
		LOCAL
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public enum FileActionExecMode {
		NORMAL,
		TERMINAL,
		EMBEDDED,
		DISPLAY_OUTPUT
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public enum FileActionTarget {
		NONE,
		CONTEXT,
		LOCATION,
		TOOLBAR
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public enum FileActionType {
		NONE,
		ACTION,
		MENU
	}
	[CCode (cheader_filename = "fm-actions.h")]
	public static void file_actions_set_desktop_env (string env);
	[CCode (cheader_filename = "fm-actions.h")]
	public static GLib.List<Fm.FileActionItem>? get_actions_for_files (GLib.List<Fm.FileInfo> files);
}
namespace _Fm {
	[CCode (cheader_filename = "fm-actions.h")]
	public static void file_actions_finalize ();
	[CCode (cheader_filename = "fm-actions.h")]
	public static void file_actions_init ();
}
namespace Utils {
}
